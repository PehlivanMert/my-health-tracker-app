importScripts(
  "https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js"
);
importScripts(
  "https://www.gstatic.com/firebasejs/9.0.0/firebase-messaging-compat.js"
);

const CACHE_VERSION = new Date().getTime();
const CACHE_NAME = `wellness-tracker-v${CACHE_VERSION}`;
const ASSETS = [
  "/",
  "/index.html",
  "/manifest.json",
  "/logo4.jpeg",
  "/offline.html",
];

// Firebase konfig√ºrasyon bilgilerini kopyalayƒ±n
const firebaseConfig = {
  apiKey: "AIzaSyD64A3LlceBtvBH2Uphg5yTUP9MgK1EeBc",
  authDomain: "my-health-tracker-application.firebaseapp.com",
  projectId: "my-health-tracker-application",
  storageBucket: "my-health-tracker-application.firebasestorage.app",
  messagingSenderId: "905993574620",
  appId: "1:905993574620:web:987e4b6f320a8d6aa5bc19",
  measurementId: "G-Y6V8X8JH7F",
};

firebase.initializeApp(firebaseConfig);
const messaging = firebase.messaging();

/* =======================
   Caching Mekanizmasƒ±
   ======================= */

// 1. Install event: ASSETS dizisindeki dosyalarƒ± √∂nbelleƒüe ekle
self.addEventListener("install", (event) => {
  console.log("[Service Worker] Install event");
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      console.log("[Service Worker] Precaching assets");
      const cachePromises = ASSETS.map((url) =>
        fetch(url)
          .then((response) => {
            if (!response.ok) {
              throw new Error(`Failed to fetch ${url}`);
            }
            return cache.put(url, response);
          })
          .catch((error) => {
            console.error(`Caching failed for ${url}:`, error);
          })
      );
      return Promise.allSettled(cachePromises);
    })
  );
  self.skipWaiting();
});

// 2. Activate event: Eski √∂nbellekleri temizle
self.addEventListener("activate", (event) => {
  console.log("[Service Worker] Activate event");
  event.waitUntil(
    caches
      .keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== CACHE_NAME) {
              console.log("[Service Worker] Deleting old cache:", cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => {
        return self.clients
          .claim()
          .then(() => {
            return self.clients.matchAll({ type: "window" });
          })
          .then((clients) => {
            clients.forEach((client) => client.navigate(client.url));
          });
      })
  );
});

// Eski SW'nin beklemeden yenisiyle deƒüi≈ümesini saƒülar
self.skipWaiting();

// 3. Fetch event: √ñnce √∂nbellekten yanƒ±tla, yoksa aƒüa ba≈üvur; navigasyon istekleri offline.html ile yanƒ±tlasƒ±n
self.addEventListener("fetch", (event) => {
  if (event.request.mode === "navigate") {
    event.respondWith(
      fetch(event.request)
        .then((response) => {
          // ƒ∞steƒüin ba≈üarƒ±lƒ± olmasƒ± durumunda, cache'i de g√ºncelleyebilirsiniz.
          return response;
        })
        .catch(() => caches.match("/offline.html"))
    );
  } else {
    event.respondWith(
      caches.match(event.request).then((cachedResponse) => {
        return cachedResponse || fetch(event.request);
      })
    );
  }
});

/* =======================
   Firebase Background Messaging
   ======================= */

// Background mesajlarƒ± dinle
messaging.onBackgroundMessage((payload) => {
  console.log(
    "[firebase-messaging-sw.js] Received background message ",
    payload
  );
  const { title, body, icon } = payload.notification;
  self.registration.showNotification(title, {
    body,
    icon: icon || "/logo4.jpeg",
  });
});

self.addEventListener("push", (event) => {
  if (!event.data) return;
  let data;
  try {
    data = event.data.json();
    console.log("Push event verisi:", data);
  } catch (e) {
    console.error("Push event verisi JSON formatƒ±nda deƒüil:", e);
    return;
  }
  // Eƒüer veri, i√ß i√ße bir data objesi i√ßeriyorsa, bunu kullanƒ±n.
  if (data.data) {
    data = data.data;
  }
  const title = data.title || "Bilinmeyen Bildirim";
  const body = data.body || "ƒ∞√ßerik bulunamadƒ±";
  const icon = data.icon || "/logo4.jpeg";
  
  // Bildirim t√ºr√ºne g√∂re tab indeksi belirle
  let targetTab = 0; // Varsayƒ±lan: Ana sayfa
  if (data.type === "water" || data.type === "water-reset") {
    targetTab = 1; // Ya≈üam Takibi tab'ƒ±
  } else if (data.type === "pomodoro") {
    targetTab = 0; // Rutin tab'ƒ±
  } else if (data.routineId) {
    targetTab = 0; // Rutin tab'ƒ±
  } else if (data.eventId) {
    targetTab = 4; // Takvim tab'ƒ±
  } else if (data.supplementId) {
    targetTab = 1; // Ya≈üam Takibi tab'ƒ±
  }
  
  // Tab bilgisini data'ya ekle
  const clickAction = "/"; // Ana sayfa URL'i
  
  self.registration.showNotification(title, { 
    body, 
    icon,
    data: {
      clickAction: clickAction,
      targetTab: targetTab,
      notificationType: data.type,
      routineId: data.routineId,
      eventId: data.eventId,
      supplementId: data.supplementId
    }
  });
});

// Bildirime tƒ±klama olayƒ±nƒ± dinle
self.addEventListener("notificationclick", (event) => {
  console.log("Bildirime tƒ±klandƒ±:", event.notification.data);
  
  event.notification.close();
  
  const clickAction = event.notification.data?.clickAction || "/";
  const targetTab = event.notification.data?.targetTab || 0;
  const notificationType = event.notification.data?.notificationType;
  const routineId = event.notification.data?.routineId;
  const eventId = event.notification.data?.eventId;
  const supplementId = event.notification.data?.supplementId;
  
  // Tab indeksine g√∂re sayfa adƒ±nƒ± belirle
  let pageName = "Ana Sayfa";
  if (targetTab === 1) pageName = "Ya≈üam Takibi";
  else if (targetTab === 0) pageName = "G√ºnl√ºk Rutin";
  else if (targetTab === 4) pageName = "Takvim";
  
  console.log(`üéØ [NOTIFICATION CLICK] Bildirim t√ºr√º: ${notificationType}, Y√∂nlendirilecek tab: ${pageName} (Tab ${targetTab})`);
  
  // Mevcut a√ßƒ±k pencereleri kontrol et
  event.waitUntil(
    self.clients.matchAll({ type: "window" }).then((clients) => {
      // Eƒüer uygulama zaten a√ßƒ±ksa, o pencereyi odakla ve tab deƒüi≈ütir
      for (const client of clients) {
        if (client.url.includes(self.location.origin) && "focus" in client) {
          console.log(`üì± [NOTIFICATION CLICK] Mevcut pencereye y√∂nlendiriliyor: ${pageName} (Tab ${targetTab})`);
          
          // Tab deƒüi≈üikliƒüi mesajƒ± g√∂nder
          try {
            client.postMessage({
              type: 'SWITCH_TAB',
              targetTab: targetTab
            });
            console.log(`‚úÖ [NOTIFICATION CLICK] Tab deƒüi≈üikliƒüi mesajƒ± g√∂nderildi`);
          } catch (error) {
            console.error(`‚ùå [NOTIFICATION CLICK] Mesaj g√∂nderme hatasƒ±:`, error);
          }
          
          return client.focus();
        }
      }
      
      // Eƒüer uygulama a√ßƒ±k deƒüilse, yeni pencere a√ß
      if (self.clients.openWindow) {
        console.log(`üÜï [NOTIFICATION CLICK] Yeni pencere a√ßƒ±lƒ±yor: ${pageName} (Tab ${targetTab})`);
        return self.clients.openWindow(clickAction).then((newClient) => {
          // Yeni pencere a√ßƒ±ldƒ±ktan sonra tab deƒüi≈üikliƒüi mesajƒ± g√∂nder
          if (newClient) {
            setTimeout(() => {
              try {
                newClient.postMessage({
                  type: 'SWITCH_TAB',
                  targetTab: targetTab
                });
                console.log(`‚úÖ [NOTIFICATION CLICK] Yeni pencereye tab deƒüi≈üikliƒüi mesajƒ± g√∂nderildi`);
              } catch (error) {
                console.error(`‚ùå [NOTIFICATION CLICK] Yeni pencereye mesaj g√∂nderme hatasƒ±:`, error);
              }
            }, 2000); // Pencere y√ºklenmesi i√ßin daha uzun bekleme
          }
        }).catch((error) => {
          console.error(`‚ùå [NOTIFICATION CLICK] Yeni pencere a√ßma hatasƒ±:`, error);
        });
      }
    }).catch((error) => {
      console.error(`‚ùå [NOTIFICATION CLICK] Genel hata:`, error);
    })
  );
});

//ctrl+ k + c
//ctrl+ k + u
